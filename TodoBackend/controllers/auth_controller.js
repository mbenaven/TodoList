
//import our user model
// jwt is a node package for generating and sending auth tokens
var User = require('../models/user');
var jwt = require('jwt-simple');
var config = require('../config');

//takes the user object as an arg, and creates a key for the user sent to the config obj
function tokenForUser(user) {
  return jwt.encode({
    sub: user._id, // Like an ID for jwt
    iat: new Date().getTime() //iat = issued at, when it was issued
  }, config.secret);  //secret key will be in the config file
}

//From the controller we directly export a new function called signup
//Functions passed through an express route take 3 arguments: request obj., response obj., next function
//Grab email and pw, pass it to server from the request object
//the req obj doesn't actually exist yet, its added by middleware called bodyparser
exports.signup = function(req, res, next) {
  var email = req.body.email;
  var password = req.body.password;
  if (!email || !password){
    return res.status(422).send({error: "You must provide an email and password."});
  }

//Try to find a user with the email entered, to see if its taken
//Pass in callback function with an error object and the user we found
//If theres an error we pass it to the next function
  User.findOne({email: email}, function (err, existingUser) {
    if (err) { return next(err) }
    if (existingUser) { return res.status(422).send({error: "Email is in use."})}

    var user = new User ({
      email: email,
      password: password
    });

    user.save(function(err) {
      if (err) {
        if (err.errors && err.errors.email) {
          return res.status(422).send({error: err.errors.email.message});
        }
        return next(err);
      }
      //Creates a token for a user
      //we will then save the Auth token for future API calls
      //using swifty JSON to pick apart the JSON response
      //users unique ID is generated by mongoDB
      res.json({token: tokenForUser(user), userId: user._id});
    });
  })
  /*
  console.log(email.password);
  //Dummy response, fake User ID
  res.json({userID: "USER ID HERE"}); */
}

//Directly export our signin action
//Passport will give us access to the req.user object and check the credentials
//Passport is middleware for user authentification
//there are multiple mains for user Auth, refered to as Strategies
//We need to configure a strategy for signing in, called a Local strategy
//Will see the passport object in the services folder
exports.signin = function(req, res, next) {
  res.json({token: tokenForUser(req.user), userID: req.user._id})
}
